{"version":3,"sources":["context/TaskListContext.js","components/Task.js","components/TaskList.js","components/TaskForm.js","components/Header.js","components/Profile.js","components/App.js","index.js"],"names":["TaskListContext","createContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","filter","task","complete","length","completed","setCompleted","completedPercent","setCompletedPercent","useEffect","setItem","stringify","percent","toFixed","name","editItem","setEditItem","Provider","value","addTask","title","id","uuidv4","removeTask","t","clearList","findItem","item","find","editTask","newTasks","map","completeTask","completedTask","children","Task","useContext","className","onClick","TaskList","key","TaskForm","setTitle","console","log","onSubmit","e","preventDefault","onChange","target","type","placeholder","Header","Profile","setName","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d37afba.chunk.js","sourcesContent":["import React, {createContext,useState,useEffect,useReducer} from \"react\"\r\nimport { v4 as uuidv4 } from 'uuid'\r\nexport const TaskListContext = createContext()\r\n\r\nconst TaskListContextProvider = props => {\r\n    const initialState = JSON.parse(localStorage.getItem('tasks'))||[]\r\n    const[tasks,setTasks] = useState(initialState)\r\n    const[completed,setCompleted] = useState(tasks.filter(task=>task.complete===true).length)\r\n    const[completedPercent,setCompletedPercent] = useState(0)\r\n    useEffect(()=>{\r\n        localStorage.setItem('tasks',JSON.stringify(tasks))\r\n        setCompletedPercent(() => {\r\n            if (tasks.length===0) return 0\r\n            const percent = (completed/tasks.length)*100\r\n            if (percent%1!==0) return percent.toFixed(2)\r\n            else return percent\r\n        })\r\n    },[tasks])\r\n    const[name,setName] = useState(\"Enter your name...\")\r\n    const[editItem,setEditItem] = useState(null)\r\n    //According to ES6 if property and value have the same name we can only write title\r\n    //instead of title: title\r\n    const addTask = title => {\r\n        setTasks([...tasks,{title, complete: false, id: uuidv4()}])\r\n    }\r\n    const removeTask = id => {\r\n        for (let t of tasks) {\r\n            if (t.id===id&&t.complete===true) setCompleted(completed-1)\r\n        }\r\n        setTasks(tasks.filter(\r\n            task=>task.id!==id\r\n            ))\r\n    }\r\n    const clearList = () => {\r\n        if (tasks.length > 0) {\r\n            setTasks([])\r\n            setCompleted(0)\r\n        }\r\n    }\r\n    const findItem = id => {\r\n        const item = tasks.find(task=>task.id===id)\r\n        setEditItem(item)\r\n    }\r\n    const editTask = (title,id) => {\r\n        const newTasks = tasks.map(task=>(task.id===id?{title,id}:task))\r\n        setTasks(newTasks)\r\n        setEditItem(null)\r\n    }\r\n    const completeTask = completedTask => {\r\n        const newTasks = tasks.map(\r\n            task=>{\r\n                return task.id===completedTask.id?{...completedTask,complete: true}:task})\r\n        setCompleted(completed+1)\r\n        setTasks(newTasks)\r\n    }\r\n    return (\r\n        <TaskListContext.Provider value={{tasks,addTask,removeTask,clearList,findItem,editTask,editItem,setEditItem,completeTask,name,completedPercent}}>\r\n        {props.children}\r\n        </TaskListContext.Provider>\r\n    )\r\n}\r\nexport default TaskListContextProvider","import React, {useContext} from \"react\"\r\nimport {TaskListContext} from \"../context/TaskListContext\"\r\n\r\nconst Task = ({task}) => {\r\n    const{removeTask,findItem,completeTask} = useContext(TaskListContext)\r\n    return(\r\n    <li className={!task.complete?\"list-item\":\"list-item-complete\"}>\r\n        <span>{task.title}</span>\r\n        {!task.complete?\r\n        <div>\r\n            <button onClick={()=>removeTask(task.id)} className=\"btn-delete task-btn\">\r\n                <i className=\"fas fa-trash-alt\">\r\n                </i>\r\n            </button>\r\n            <button onClick={()=>findItem(task.id)} className=\"btn-edit task-btn\">\r\n                <i className=\"fas fa-pen\">\r\n                </i>\r\n            </button>\r\n            <button onClick={()=>completeTask(task)} className=\"btn-complete task-btn\">\r\n                <i className=\"fas fa-check\">\r\n                </i>\r\n            </button>\r\n        </div>:\r\n        <div>\r\n          <button onClick={()=>removeTask(task.id)} className=\"btn-delete task-btn\">\r\n                <i className=\"fas fa-trash-alt\">\r\n                </i>\r\n            </button>  \r\n        </div>}\r\n    </li>\r\n    )\r\n}\r\n\r\n\r\nexport default Task","import React, {useContext} from \"react\"\r\nimport {TaskListContext} from \"../context/TaskListContext\"\r\nimport Task from \"./Task\"\r\n\r\nconst TaskList = () => {\r\n    const {tasks} = useContext(TaskListContext)\r\n    return (\r\n        <div>\r\n        {tasks.length?\r\n            <ul className=\"list\">\r\n                {tasks.map(task=><Task key={task.id} task={task}/>)}\r\n            </ul>\r\n        :<div className=\"no-tasks\">No tasks</div>}\r\n        </div>\r\n    )\r\n}\r\nexport default TaskList","import React,{useContext,useState,useEffect} from \"react\"\r\nimport {TaskListContext} from \"../context/TaskListContext\"\r\n\r\nconst TaskForm = () => {\r\n    const {addTask,clearList, editTask, editItem} = useContext(TaskListContext)\r\n\r\n    const [title,setTitle] = useState('')\r\n\r\n    const handleChange = e => {\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (title.length > 0) {\r\n            if(!editItem) {\r\n                addTask(title)\r\n                setTitle('')\r\n            }\r\n            else {\r\n                editTask(title,editItem.id)\r\n                setTitle('')\r\n            }\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        if(editItem) {\r\n            setTitle(editItem.title)\r\n            console.log(editItem)\r\n        }\r\n        else {\r\n            setTitle('')\r\n        }\r\n    },[editItem])\r\n    return (\r\n        <form onSubmit = {handleSubmit} className=\"form\">\r\n            <input\r\n                onChange = {handleChange}\r\n                value={title} \r\n                type=\"text\"\r\n                className=\"task-input\"\r\n                placeholder=\"Add Task...\"/>\r\n        <div className=\"buttons\">\r\n            <button type=\"submit\" className=\"btn\r\n            add-task-btn\">{editItem?\"Edit Task\":\"Add task\"}</button>\r\n            <button onClick={clearList} type=\"button\" className=\"btn\r\n            clear-btn\">Clear list</button>\r\n        </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TaskForm","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Task Manager</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React,{useContext} from \"react\"\r\nimport {TaskListContext} from '../context/TaskListContext'\r\n\r\nconst Profile = () => {\r\n    const {name,setName,completedPercent} = useContext(TaskListContext)\r\n    return (\r\n        <div className=\"profile\">\r\n            <h1>Profile</h1>\r\n            {/* <span>{name}</span> */}\r\n            <span className=\"completed\">Completed: {completedPercent}%</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\nimport TaskList from \"./TaskList\"\nimport TaskForm from \"./TaskForm\"\nimport Header from \"./Header\"\nimport Profile from \"./Profile\"\nimport '../styles/App.css';\nimport TaskListContextProvider from \"../context/TaskListContext\"\n\nconst App = () => {\n  return (\n    <TaskListContextProvider>\n    <div className=\"container\">\n      <div className=\"app-wrapper\">\n          <Header/>\n        <div className=\"main\">\n          <TaskForm/>\n          <TaskList/>\n        </div>\n      </div>\n      <aside>\n        <Profile/>\n      </aside>\n    </div>\n    </TaskListContextProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}